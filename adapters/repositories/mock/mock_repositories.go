// Code generated by MockGen. DO NOT EDIT.
// Source: adapters/repositories/repositories_interfaces.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	model "github.com/daichi1002/go-graphql/entities/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, input model.CreateUserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, input)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, userId string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, userId)
}

// MockTxRepository is a mock of TxRepository interface.
type MockTxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTxRepositoryMockRecorder
}

// MockTxRepositoryMockRecorder is the mock recorder for MockTxRepository.
type MockTxRepositoryMockRecorder struct {
	mock *MockTxRepository
}

// NewMockTxRepository creates a new mock instance.
func NewMockTxRepository(ctrl *gomock.Controller) *MockTxRepository {
	mock := &MockTxRepository{ctrl: ctrl}
	mock.recorder = &MockTxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRepository) EXPECT() *MockTxRepositoryMockRecorder {
	return m.recorder
}

// DoInTx mocks base method.
func (m *MockTxRepository) DoInTx(f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTx", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInTx indicates an expected call of DoInTx.
func (mr *MockTxRepositoryMockRecorder) DoInTx(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTx", reflect.TypeOf((*MockTxRepository)(nil).DoInTx), f)
}
