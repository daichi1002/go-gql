// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/usecases_interfaces.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	model "github.com/daichi1002/go-graphql/entities/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGetUserUsecase is a mock of GetUserUsecase interface.
type MockGetUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserUsecaseMockRecorder
}

// MockGetUserUsecaseMockRecorder is the mock recorder for MockGetUserUsecase.
type MockGetUserUsecaseMockRecorder struct {
	mock *MockGetUserUsecase
}

// NewMockGetUserUsecase creates a new mock instance.
func NewMockGetUserUsecase(ctrl *gomock.Controller) *MockGetUserUsecase {
	mock := &MockGetUserUsecase{ctrl: ctrl}
	mock.recorder = &MockGetUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserUsecase) EXPECT() *MockGetUserUsecaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockGetUserUsecase) Handle(ctx context.Context, userId string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockGetUserUsecaseMockRecorder) Handle(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockGetUserUsecase)(nil).Handle), ctx, userId)
}

// MockCreateUserUsecase is a mock of CreateUserUsecase interface.
type MockCreateUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserUsecaseMockRecorder
}

// MockCreateUserUsecaseMockRecorder is the mock recorder for MockCreateUserUsecase.
type MockCreateUserUsecaseMockRecorder struct {
	mock *MockCreateUserUsecase
}

// NewMockCreateUserUsecase creates a new mock instance.
func NewMockCreateUserUsecase(ctrl *gomock.Controller) *MockCreateUserUsecase {
	mock := &MockCreateUserUsecase{ctrl: ctrl}
	mock.recorder = &MockCreateUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserUsecase) EXPECT() *MockCreateUserUsecaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockCreateUserUsecase) Handle(ctx context.Context, input model.CreateUserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCreateUserUsecaseMockRecorder) Handle(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCreateUserUsecase)(nil).Handle), ctx, input)
}
